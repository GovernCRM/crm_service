# Generated by Django 5.1.5 on 2025-01-21 14:48

import contact.validators
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.RunSQL("CREATE EXTENSION IF NOT EXISTS hstore;"),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_num', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d+$', message='Street number must be numeric')])),
                ('street_dir', models.CharField(blank=True, help_text='Directional prefix, e.g., N, S, E, W', max_length=2, null=True)),
                ('street_name', models.CharField(help_text='Name of the street', max_length=100)),
                ('street_type', models.CharField(blank=True, help_text='Type of the street, e.g., St, Ave, Blvd', max_length=20, null=True)),
                ('street_post_dir', models.CharField(blank=True, help_text='Directional suffix, e.g., N, S, E, W', max_length=2, null=True)),
                ('building_num', models.CharField(blank=True, help_text='Building or apartment number', max_length=10, null=True)),
                ('city', models.CharField(help_text='City name', max_length=100)),
                ('zip_code', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d{5}(-\\d{4})?$', message='Enter a valid ZIP code')])),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('user_uuid', models.UUIDField(blank=True, null=True)),
                ('first_name', models.CharField(help_text='First name', max_length=255)),
                ('middle_name', models.CharField(blank=True, help_text='Middle name ', max_length=255, null=True)),
                ('last_name', models.CharField(help_text='Surname or family name', max_length=255)),
                ('title', models.CharField(blank=True, choices=[('mr', 'Mr.'), ('ms', 'Ms.')], help_text='Choices: mr, ms', max_length=2, null=True)),
                ('contact_type', models.CharField(blank=True, choices=[('customer', 'Customer'), ('supplier', 'Supplier'), ('producer', 'Producer'), ('personnel', 'Personnel')], help_text='Choices: customer, supplier, producer, personnel', max_length=30, null=True)),
                ('customer_type', models.CharField(blank=True, choices=[('customer', 'Customer'), ('company', 'Company'), ('public', 'Public')], help_text='Choices: customer, company, public', max_length=30, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
                ('addresses', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), blank=True, help_text="\n                           List of 'address' objects with the structure:\n                           type (string - Choices: home, billing, business, delivery, mailing),\n                           street (string),\n                           house_number (string),\n                           postal_code: (string),\n                           city (string),\n                           country (string)\n                           ", null=True, size=None, validators=[contact.validators.validate_addresses])),
                ('emails', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), blank=True, help_text="\n                               List of 'email' objects with the structure:\n                               type (string - Choices: office, private, other),\n                               email (string)\n                               ", null=True, size=None, validators=[contact.validators.validate_emails])),
                ('phones', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), blank=True, help_text="\n                               List of 'phone' objects with the structure:\n                               type (string - Choices: office, mobile, home, fax),\n                               number (string)\n                               ", null=True, size=None, validators=[contact.validators.validate_phones])),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
    ]
