# Generated by Django 5.1.5 on 2025-01-21 14:48

import contact.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_num', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d+$', message='Street number must be numeric')])),
                ('street_dir', models.CharField(blank=True, help_text='Directional prefix, e.g., N, S, E, W', max_length=2, null=True)),
                ('street_name', models.CharField(help_text='Name of the street', max_length=100)),
                ('street_type', models.CharField(blank=True, help_text='Type of the street, e.g., St, Ave, Blvd', max_length=20, null=True)),
                ('street_post_dir', models.CharField(blank=True, help_text='Directional suffix, e.g., N, S, E, W', max_length=2, null=True)),
                ('building_num', models.CharField(blank=True, help_text='Building or apartment number', max_length=10, null=True)),
                ('city', models.CharField(help_text='City name', max_length=100)),
                ('zip_code', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d{5}(-\\d{4})?$', message='Enter a valid ZIP code')])),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('user_uuid', models.UUIDField(blank=True, null=True)),
                ('first_name', models.CharField(help_text='First name', max_length=255)),
                ('middle_name', models.CharField(blank=True, help_text='Middle name ', max_length=255, null=True)),
                ('last_name', models.CharField(help_text='Surname or family name', max_length=255)),
                ('title', models.CharField(blank=True, choices=[('mr', 'Mr.'), ('ms', 'Ms.')], help_text='Choices: mr, ms', max_length=2, null=True)),
                ('contact_type', models.CharField(blank=True, choices=[('customer', 'Customer'), ('supplier', 'Supplier'), ('producer', 'Producer'), ('personnel', 'Personnel')], help_text='Choices: customer, supplier, producer, personnel', max_length=30, null=True)),
                ('customer_type', models.CharField(blank=True, choices=[('customer', 'Customer'), ('company', 'Company'), ('public', 'Public')], help_text='Choices: customer, company, public', max_length=30, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
                ('addresses', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), blank=True, help_text="\n                           List of 'address' objects with the structure:\n                           type (string - Choices: home, billing, business, delivery, mailing),\n                           street (string),\n                           house_number (string),\n                           postal_code: (string),\n                           city (string),\n                           country (string)\n                           ", null=True, size=None, validators=[contact.validators.validate_addresses])),
                ('emails', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), blank=True, help_text="\n                               List of 'email' objects with the structure:\n                               type (string - Choices: office, private, other),\n                               email (string)\n                               ", null=True, size=None, validators=[contact.validators.validate_emails])),
                ('phones', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), blank=True, help_text="\n                               List of 'phone' objects with the structure:\n                               type (string - Choices: office, mobile, home, fax),\n                               number (string)\n                               ", null=True, size=None, validators=[contact.validators.validate_phones])),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StateRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the state record', primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Person', 'Person')], default='Person', help_text='Type of record', max_length=10)),
                ('original_state', models.CharField(choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('PR', 'Puerto Rico')], help_text='State where the record originates', max_length=2)),
                ('precinct', models.CharField(help_text='Precinct code', max_length=6)),
                ('last_name', models.CharField(help_text='Last name of the person', max_length=100)),
                ('first_name', models.CharField(help_text='First name of the person', max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text='Middle name of the person', max_length=100, null=True)),
                ('suffix', models.CharField(blank=True, help_text='Suffix, e.g., Jr., Sr., III', max_length=10, null=True)),
                ('voter_id', models.CharField(help_text='Unique voter identification number', max_length=20, unique=True)),
                ('political_affiliation', models.CharField(choices=[('DEM', 'Democratic'), ('REP', 'Republican'), ('IND', 'Independent'), ('OTH', 'Other')], help_text='Political party affiliation', max_length=10)),
                ('status', models.CharField(choices=[('A', 'Active'), ('I', 'Inactive'), ('R', 'Removed')], help_text='Voter status', max_length=1)),
                ('date_of_birth', models.DateField(help_text='Date of birth of the person')),
                ('registration_date', models.DateField(blank=True, help_text='Date the person registered', null=True)),
                ('muni', models.CharField(blank=True, help_text='Municipality of the person', max_length=100, null=True)),
                ('muni_sub', models.CharField(blank=True, help_text='Subdivision of the municipality', max_length=100, null=True)),
                ('school', models.CharField(blank=True, help_text='School district of the person', max_length=100, null=True)),
                ('school_sub', models.CharField(blank=True, help_text='Subdivision of the school district', max_length=100, null=True)),
                ('tech_center', models.CharField(blank=True, help_text='Technology center of the person', max_length=100, null=True)),
                ('tech_center_sub', models.CharField(blank=True, help_text='Subdivision of the technology center', max_length=100, null=True)),
                ('county_comm', models.CharField(blank=True, help_text='County commission district', max_length=100, null=True)),
                ('voter_history', models.JSONField(blank=True, help_text='Historical voting data as a JSON object', null=True)),
                ('county_desc', models.CharField(help_text='Description of the county', max_length=100)),
                ('returned_undeliverable', models.BooleanField(default=False, help_text='Whether mail was returned as undeliverable')),
                ('mailing_address', models.OneToOneField(blank=True, help_text='Mailing address', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mailing_record', to='contact.address')),
                ('residential_address', models.OneToOneField(help_text='Residential address', on_delete=django.db.models.deletion.CASCADE, related_name='residential_record', to='contact.address')),
            ],
        ),
    ]
